name: Nightly APK Release

on:
  push:
    branches:
      - main
  pull_request:

env:
  FLUTTER_VERSION: "3.32.8"

permissions:
  contents: write

jobs:
  build_apk:
    name: Build APK
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Setup Flutter
        uses: subosito/flutter-action@v2.21.0
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}

      - name: Create .env file
        run: |
          echo "FIREBASE_API_KEY=${{ secrets.FIREBASE_API_KEY }}" >> .env
          echo "FIREBASE_PROJECT_ID=${{ secrets.FIREBASE_PROJECT_ID }}" >> .env
          echo "FIREBASE_MESSAGING_SENDER_ID=${{ secrets.FIREBASE_MESSAGING_SENDER_ID }}" >> .env
          echo "FIREBASE_STORAGE_BUCKET=${{ secrets.FIREBASE_STORAGE_BUCKET }}" >> .env
          echo "FIREBASE_ANDROID_APP_ID=${{ secrets.FIREBASE_ANDROID_APP_ID }}" >> .env
          echo "FIREBASE_IOS_APP_ID=${{ secrets.FIREBASE_IOS_APP_ID }}" >> .env
          echo "FIREBASE_IOS_BUNDLE_ID=${{ secrets.FIREBASE_IOS_BUNDLE_ID }}" >> .env

      - name: Install dependencies
        run: flutter pub get

      - name: Build APK
        run: flutter build apk --release

      - name: Set APK name
        run: |
          SHORT_SHA=$(echo $GITHUB_SHA | cut -c1-7)
          echo "APK_NAME=IntelliHire.${SHORT_SHA}.apk" >> $GITHUB_ENV

      - name: Copy APK to root with new name
        run: |
          cp build/app/outputs/flutter-apk/app-release.apk $APK_NAME

      - name: Delete release if exist then create release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release view "nightly" && gh release delete "nightly" -y --cleanup-tag
          gh release create "nightly" "$APK_NAME" -p -t "IntelliHire Nightly" --notes "Automatically generated nightly APK for commit $GITHUB_SHA"
